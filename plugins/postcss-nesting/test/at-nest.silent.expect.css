/* This entire file can be deleted after removing support for "@nest" */

/* basic.css */
a {
	order: 1;

	order: 5;
	order: 6;

	order: 10;

	order: 14;
}
@media screen, print {
a {
		order: 2;

		order: 4;
}
	}
@media screen and (min-width: 480px), print and (min-width: 480px) {
a {
			order: 3;
}
		}
:is(a) b {
		order: 7;

		order: 9;
	}
:is(:is(a) b) c {
			order: 8;
		}
a {

	@nest body & {
		order: 11;

		@nest html & {
			order: 12;
		}

		order: 13;
	}
}
@media screen {
a {
		order: 15;
}
	}
@media screen and (min-width: 480px) {
a {
			order: 16;
}
		}
a {

	@nest body& {
		order: 17;
	}

	@nest html body& {
		order: 18;
	}
}

a {
	@nest .foo& {
		order: 19;
	}

	@nest .foo .bar& {
		order: 20;
	}
}

a b {
	@nest .foo& {
		order: 21;
	}

	@nest .foo .bar& {
		order: 22;
	}
}

:is(.foo)h1,
	:is(.foo)h2 {
		color: red;
	}

:is(li)+:is(li) {
		background: red;
	}

:is(.foo):where(h1) {
		background: red;
	}

:is(a) b[a="a&b"] {
		order: 31;
	}

:is(:is(.a,
.b).c,
	:is(.a,
.b).d)::before {
			order: 41;
		}

:is(.a:hover, .b:focus)::before, :is(.a:hover, .b:focus)::after {
		order: 51;
	}

/* leading : root */
.comments {
	/* leading : 1 */
	order: 61;

	/* leading : 4 */
	order: 64;
	/* trailing: 2 */
}
:is(.comments) .comment {
		order: 62;
	}
/* loose comment */
:is(.comments) .comment {
		order: 63;
	}
/* trailing: 5 */
/* nested deeper */
:is(:is(.comments) .comment) .comment {
			order: 65;
		}

.pseudo-element {
	@nest ::before& {
		order: 71;
	}

	@nest ::before & {
		order: 71.1;
	}
}

.pseudo-element {
	@nest :before& {
		order: 72;
	}

	@nest :before & {
		order: 72.1;
	}
}

.pseudo-element {
	@nest &::after {
		order: 73;
	}

	@nest & ::after {
		order: 73.1;
	}
}

.pseudo-element {
	@nest &:after {
		order: 74;
	}

	@nest & :after {
		order: 74.1;
	}
}

.has-semi-colons-on-the-last-decl {
	order: 73;
	/* a comment */
}

:is(.has-semi-colons-on-the-last-decl) .foo {
		order: 73.1;
	}

.has-semi-colons-on-the-last-decl {
	order: 74;
	/* a comment */

	@nest & .foo {
		order: 74.1;
	}
}

.mixed-declarations-and-rules--a {

	declaration: 1;
}

:is(.mixed-declarations-and-rules--a) {
		nested: 1;
	}

.mixed-declarations-and-rules--b {
	declaration: 1;

	declaration: 2;

	declaration: 3;
}

:is(.mixed-declarations-and-rules--b) {
		nested: 1;
	}

@media screen {

.mixed-declarations-and-rules--b {
		nested: 2;
}
	}

.node-less-at-rule {
	declaration: 1;

	declaration: 2;
}

@layer foo;


/* at-rule.css */
a {
	order: 1;

	@nest b & {
		order: 2;
	}

	@nest c & {
		order: 3;
	}

	@nest d & {
		order: 4;
	}

	@nest e & {
		order: 5;
	}
}

a {
	order: 1;

	@nest & b {
		order: 2;
	}

	@nest & c {
		order: 3;
	}

	@nest & d {
		order: 4;
	}

	@nest & e {
		order: 5;
	}

	@nest &[foo="& ,\'"] {
		order: 6;
	}

	@nest &[a="& ,\'"][b='& . \\a &'] {
		order: 7;
	}

	@nest &\\foo {
		order: 8;
	}
}

.foo {
	@nest &h1 {
		color: red;
	}
}

.foo {

	@nest &h1,
	&h2 {
		color: red;
	}
}

.foo {
	@nest &.bar {
		color: red;
	}
}


.foo {

	@nest &.bar,
	&.baz {
		color: red;
	}
}

h1 {
	@nest .foo& {
		color: blue;
	}
}

h1 {
	@nest .foo& .baz & {
		color: blue;
	}
}

h1 {

	@nest .foo&,
	.bar& {
		color: blue;
	}
}

article {
	color: blue;

	@nest :where(&) {
		color: red;
	}
}

/* direct.css */
a,
b {
	order: 1;

	order: 5;
}
:is(a,
b) c,
	:is(a,
b) d {
		order: 2;

		order: 4;
	}
:is(:is(a,
b) c,
	:is(a,
b) d) e,
		:is(:is(a,
b) c,
	:is(a,
b) d) f {
			order: 3;
		}

a,
b {
	order: 1;

	@nest & c,
	& d {
		order: 2;

		@nest & e,
		& f {
			order: 3;
		}

		order: 4;
	}

	order: 5;
}

a,
b {
	order: 1;

	order: 5;
}

:is(a,
b) c,
	:is(a,
b) d {
		order: 2;

		order: 4;
	}

:is(:is(a,
b) c,
	:is(a,
b) d) e,
		:is(:is(a,
b) c,
	:is(a,
b) d) f {
			order: 3;
		}

.a,
.b {
	order: 6;

	@nest & .c,
	& .d {
		order: 7;

		@nest & .e,
		& .f {
			order: 8;
		}

		order: 9;
	}

	order: 10;
}

/* empty.css */
:is(:is(a) b) c {
			order: 1;
		}

d {
	order: 2;
}

:is(d) e {
		order: 3;
	}

f {

	order: 5;
}

:is(f) g {
		order: 4;
	}

a {
	@nest & b {
		@nest & c {
			order: 1;
		}
	}
}

d {
	order: 2;

	@nest & e {
		order: 3;
	}
}

f {
	@nest & g {
		order: 4;
	}

	order: 5;
}

/* ignore.css */
a,
b {
	order: 1;
}
:is(a,
b) c,
	:is(a,
b) d {
		order: 2;
	}

:scope e {
	order: 3;
}

:is(f)g {
		order: 5;
	}

a,
b {
	order: 1;

	@nest c,
	d {
		order: 2;
	}
}

@nest & e {
	order: 3;
}

f {
	@nest &h {
		order: 5;
	}

	@nest &|i {
		order: 6;
	}
}

/* invalid-selector.css */
.foo : bar {
	&.child {
		order: 1;
	}
}

.foo : bar {
	@nest &.child {
		order: 2;
	}
}

.foo {
	&.child : bar {
		order: 3;
	}
}

.foo {
	@nest &.child : bar {
		order: 4;
	}
}

/* media.css */
a {
	order: 1;
}
@media (min-width: 100px) {
a {
		order: 2;
}
	}
@media (min-width: 100px) and (max-width: 200px) {
a {
			order: 3;
}
		}
@media (min-width: 100px) and (max-width: 200px) {

		:is(a) b {
				order: 4;
		}
			}
@media screen and (max-width: 300px), screen and (min-aspect-ratio: 16/9), print and speech and (max-width: 300px), print and speech and (min-aspect-ratio: 16/9) {
a {
			order: 5;
}

			:is(a) c {
				order: 6;
			}
		}

a {
	order: 1;
}

@media (min-width: 100px) {

a {
		order: 2;
}
	}

@media (min-width: 100px) and (max-width: 200px) {

a {
			order: 3;
}
		}

@media (min-width: 100px) {

a {

		@nest & b {
			@media (max-width: 200px) {
				order: 4;
			}
		}
}
	}

@media screen and (max-width: 300px), screen and (min-aspect-ratio: 16/9), print and speech and (max-width: 300px), print and speech and (min-aspect-ratio: 16/9) {

a {
			order: 5;

			@nest & c {
				order: 6;
			}
}
		}

/* pseudo-element.css */
::before {

	@nest .foo&,
	&:focus {
		order: 1;
	}
}

:is(.a:hover,
.b:focus)::before,
	:is(.a:hover,
.b:focus)::after {
		order: 2;
	}

:is(.a)::before {
		order: 3;
	}

:is(.a)::after {
		order: 4;
	}

:is(.a)::before {
		order: 5;
	}

:is(:is(.a)::before):focus {
			order: 6;
		}

:is(.a)::after {
		order: 7;
	}

:is(:is(.a)::after):hover {
			order: 8;
		}

.anything::before {
	@nest .something_else>& {
		order: 9;
	}
}

/* spec-examples.css */
/* https://www.w3.org/TR/css-nesting-1/ */

/* Example 2 */

:is(table.colortable) td {
		text-align: center;
	}

:is(:is(table.colortable) td).c {
			text-transform: uppercase
		}

:is(:is(table.colortable) td):first-child,
		:is(:is(table.colortable) td):first-child+td {
			border: 1px solid black
		}

:is(table.colortable) th {
		text-align: center;
		background: black;
		color: white;
	}

/* Example 3 */
/* & can be used on its own */
.foo {
	color: blue;
}
:is(.foo)>.bar {
		color: red;
	}

/* equivalent to
  .foo { color: blue; }
  .foo > .bar { color: red; }
*/


/* or in a compound selector,
   refining the parent’s selector */
.foo {
	color: blue;
}
:is(.foo).bar {
		color: red;
	}

/* equivalent to
  .foo { color: blue; }
  .foo.bar { color: red; }
*/

/* multiple selectors in the list must all
   start with & */
.foo,
.bar {
	color: blue;
}
:is(.foo,
.bar)+.baz,
	:is(.foo,
.bar).qux {
		color: red;
	}

/* equivalent to
  .foo, .bar { color: blue; }
  :is(.foo, .bar) + .baz,
  :is(.foo, .bar).qux { color: red; }
*/

/* & can be used multiple times in a single selector */
.foo {
	color: blue;
}
:is(.foo) .bar :is(.foo) .baz :is(.foo) .qux {
		color: red;
	}

/* equivalent to
  .foo { color: blue; }
  .foo .bar .foo .baz .foo .qux { color: red; }
*/

/* Somewhat silly, but can be used all on its own, as well. */
.foo {
	color: blue;
}
:is(.foo) {
		padding: 2ch;
	}

/* equivalent to
  .foo { color: blue; }
  .foo { padding: 2ch; }

  // or

  .foo {
    color: blue;
    padding: 2ch;
  }
*/

/* Again, silly, but can even be doubled up. */
.foo {
	color: blue;
}
:is(.foo):is(.foo) {
		padding: 2ch;
	}

/* equivalent to
  .foo { color: blue; }
  .foo.foo { padding: 2ch; }
*/

/* The parent selector can be arbitrarily complicated */
:is(.error,
#404):hover>.baz {
		color: red;
	}

/* equivalent to
  :is(.error, #404):hover > .baz { color: red; }
*/

/* As can the nested selector */
:is(.foo):is(.bar,:is(.foo).baz) {
		color: red;
	}

/* equivalent to
  .foo:is(.bar, .foo.baz) { color: red; }
*/

/* Multiple levels of nesting "stack up" the selectors */
figure {
	margin: 0;
}
:is(figure)>figcaption {
		background: hsl(0 0% 0% / 50%);
	}
:is(:is(figure)>figcaption)>p {
			font-size: .9rem;
		}

/* equivalent to
  figure { margin: 0; }
  figure > figcaption { background: hsl(0 0% 0% / 50%); }
  figure > figcaption > p { font-size: .9rem; }
*/

/* No concatenation */
.foo {
	color: blue;
}
:is(.foo)__bar {
		color: red;
	}

/* No & at all */
.foo {
	color: blue;
}
:is(.foo) .bar {
		color: red;
	}

/* & isn’t the first simple selector */
.foo {
	color: blue;
}
.bar:is(.foo) {
		color: red;
	}

/* & isn’t the first selector of every one in the list */
.foo,
.bar {
	color: blue;
}
:is(.foo,
.bar)+.baz,
	:is(.foo,
.bar) .qux {
		color: red;
	}

/* Example 4 */
.foo {
	color: red;

	@nest &>.bar {
		color: blue;
	}
}

/* equivalent to
  .foo { color: red; }
  .foo > .bar { color: blue; }
*/

.foo {
	color: red;

	@nest .parent & {
		color: blue;
	}
}

/* equivalent to
  .foo { color: red; }
  .parent .foo { color: blue; }
*/

.foo {
	color: red;

	@nest :not(&) {
		color: blue;
	}
}

/* equivalent to
  .foo { color: red; }
  :not(.foo) { color: blue; }
*/

.foo {
	color: red;

	@nest .bar {
		color: blue;
	}
}

/* Invalid because there’s no nesting selector */

.foo {
	color: red;

	@nest & .bar,
	.baz {
		color: blue;
	}
}

/* Invalid because not all selectors in the list
  contain a nesting selector */

/* Example 5 */
.foo {
	color: blue;

	@nest .bar & {
		color: red;

		&.baz {
			color: green;
		}
	}
}

/* equivalent to
  .foo { color: blue; }
  .bar .foo { color: red; }
  .bar .foo.baz { color: green; }
*/

/* Example 6 */
/* Properties can be directly used */
.foo {
	display: grid;
}
@media (orientation: landscape) {
.foo {
		grid-auto-flow: column;
}
	}

/* equivalent to
  .foo { display: grid; }

  @media (orientation: landscape) {
    & {
      grid-auto-flow: column;
    }
  }
*/

/* finally equivalent to
  .foo { display: grid; }

  @media (orientation: landscape) {
    .foo {
      grid-auto-flow: column;
    }
  }
*/

/* Conditionals can be further nested */
.foo {
	display: grid;
}
@media (orientation: landscape) {
.foo {
		grid-auto-flow: column;
}
	}
@media (orientation: landscape) and (min-inline-size > 1024px) {
.foo {
			max-inline-size: 1024px;
}
		}

/* equivalent to
  .foo { display: grid; }

  @media (orientation: landscape) {
    .foo {
      grid-auto-flow: column;
    }
  }

  @media (orientation: landscape) and (min-inline-size > 1024px) {
    .foo {
      max-inline-size: 1024px;
    }
  }
*/

.foo {
	color: red;
}

@media (min-width: 480px) {

		:is(.foo) h1,
		:is(.foo) h2 {
			color: blue;
		}
	}

/* Invalid because not all selectors in the list
  contain a nesting selector */

.foo {
	color: red;

	@nest @media (min-width: 480px) {
		& {
			color: blue;
		}
	}
}

/* Invalid because @nest expects a selector prelude,
  instead a conditional group rule was provided */

/* Example 7 */
article {
	color: green;

	/*
		NOTE : We are more forgiving than the spec
		This declaration is preserved
	*/
	color: red;
}
:is(article) {
		color: blue;
	}

article {
	color: green;

	/*
		NOTE : We are more forgiving than the spec
		This declaration is preserved
	*/
	color: red;

	/* valid! */
}

:is(article) {
		color: blue;
	}

:is(article).foo {
		color: yellow;
	}
